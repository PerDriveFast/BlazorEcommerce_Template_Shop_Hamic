@page "/login"
@using Microsoft.AspNetCore.WebUtilities
@inject IAuthService AuthService
@inject ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ICartService CartService

<PageTitle>Login</PageTitle>

<div class="col-lg-6">
    <EditForm Model="user" OnValidSubmit="HandleLogin">
        <DataAnnotationsValidator />
        <div class="login-form">
            <h4 class="login-title">Login</h4>
            <div class="row">
                <div class="col-lg-12">
                    <label for="email">Email</label>
                    <InputText id="email" @bind-Value="user.Email" class="form-control" />
                    <ValidationMessage For="@(() => user.Email)" />
                </div>
                <div class="col-lg-12">
                    <label for="password">Password</label>
                    <InputText id="password" @bind-Value="user.Password" class="form-control" type="password" />
                    <ValidationMessage For="@(() => user.Password)" />
                </div>
                <div class="col-md-8">
                    <div class="check-box">
                        <input type="checkbox" id="remember_me">
                        <label for="remember_me">Remember me</label>
                    </div>
                </div>
                <div class="col-md-4 pt-1 mt-md-0">
                    <div class="forgotton-password_info">
                        <a href="#"> Forgotten pasward?</a>
                    </div>
                </div>
                <div class="col-lg-12 pt-5">
                    <button class="btn btn-custom-size lg-size btn-secondary btn-primary-hover rounded-0" type="submit">Login</button>
                </div>
            </div>
        </div>
    </EditForm>
</div>

<div class="text-danger">
    <span>@errorMessage</span>
</div>

@code {
    private UserLogin user = new UserLogin();

    private string errorMessage = string.Empty;

    private string returnUrl = string.Empty;

    protected override void OnInitialized()
    {
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        if (QueryHelpers.ParseQuery(uri.Query).TryGetValue("returnUrl", out var url))
        {
            returnUrl = url;
        }
    }

    private async Task HandleLogin()
    {
        var result = await AuthService.Login(user);
        if (result.Success)
        {
            errorMessage = string.Empty;

            await LocalStorage.SetItemAsync("authToken", result.Data);
            await AuthenticationStateProvider.GetAuthenticationStateAsync();
            await CartService.StoreCartItems(true);
            await CartService.GetCartItemsCount();
            NavigationManager.NavigateTo(returnUrl);
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
